/**
 * Bir Timer sÄ±nÄ±fÄ± yazalÄ±m
 * geri sayÄ±mÄ± baÅŸlatacak ve durduracak
 */
class Timer {
  constructor() {
  }
  start() {
  }
  stop() {
  }
  /*
   * - ZamanÄ± milisaniye cinsinden alÄ±r 
   * - Saat / dakika / saniye cinsinden iÃ§inde ne kadar sÄ±ÄŸabileceÄŸini hesaplar 
   * - hours, mins, secs Ã¶zelliklerine sahip bir nesneyi dÃ¶ndÃ¼rÃ¼r 
   * - stackoverflow'dan cehennem kopyala yapÄ±ÅŸtÄ±r ğŸ’©
   */
  getTimeComponents(time) {
    const hours = this.pad(Math.floor(time % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));
    const mins = this.pad(Math.floor(time % (1000 * 60 * 60) / (1000 * 60)));
    const secs = this.pad(Math.floor(time % (1000 * 60) / 1000));
    return {
      hours,
      mins,
      secs
    };
  }
  /*
   * Verilen sayÄ±yÄ± alÄ±r, onu bir dizeye dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r ve sayÄ± 2 haneden kÃ¼Ã§Ã¼kse baÅŸÄ±na 0 ekler
   */
  pad(value) {
    return String(value).padStart(2, '0');
  }
}
const startBtn = document.querySelector('button[data-action-start]');
const stopBtn = document.querySelector('button[data-action-stop]');
const clockface = document.querySelector('.js-clockface');
const timer = new Timer({ onTick: updateClockface });
// startBtn.addEventListener("click", timer.start.bind(timer));
// stopBtn.addEventListener("click", timer.stop.bind(timer));
/*
 * - Milisaniye cinsinden zaman alÄ±r
 * - KaÃ§ saat/dakika/saniye sÄ±ÄŸabileceÄŸini hesaplar
 * - ArayÃ¼zÃ¼ Ã§izer
 */
function updateClockface({hours, mins, secs}) {
  clockface.textContent = `${ hours }:${ mins }:${ secs }`;
}