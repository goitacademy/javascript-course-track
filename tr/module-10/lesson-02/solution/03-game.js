/**
 * Bir slot makinesi iÃ§in yazÄ±lÄ±m yazÄ±n.
 * GÃ¶revi Ã§Ã¶zmek iÃ§in hazÄ±r HTML biÃ§imlendirmesini ve temel stilleri kullanÄ±n.
 *
 * "Start game" dÃ¼ÄŸmesine tÄ±kladÄ±ktan sonra
 * her pencerede sÄ±rayla gÃ¶rÃ¼nmelidir
 * 1 saniye gecikmeli bir ifade ('ğŸ¤‘' veya 'ğŸ‘¿')
 *
 * Her pencereyi iÅŸlerken, SÃ¶zler ile bir dizi oluÅŸturun
 * her biri kendi penceresinden sorumlu olacaktÄ±r,
 * sonra Promise.allSettled yÃ¶ntemini kullanarak bu diziyi iÅŸleyin
 *
 * TÃ¼m pencereler doldurulduktan sonra, ihtiyacÄ±nÄ±z olan
 * Komut dosyasÄ± oyuncunun kazanÄ±p kazanmadÄ±ÄŸÄ±nÄ± otomatik olarak belirlemelidir.
 * EÄŸer her pencerede aynÄ± ifade varsa, bu kullanÄ±cÄ±nÄ±n kazandÄ±ÄŸÄ± anlamÄ±na gelir
 *
 * SonuÃ§ alanÄ±nda oyun durumu ('Winner' veya 'Loser') hakkÄ±nda bir mesaj gÃ¶rÃ¼ntÃ¼leyin
 *
 * "Start game" dÃ¼ÄŸmesine tekrar bastÄ±ktan sonra
 * Saha temizlenmeli ve oyun baÅŸtan baÅŸlamalÄ±dÄ±r.
 */
const startBtn = document.querySelector('.start-btn');
const container = document.querySelector('.container');
const result = document.querySelector('.result');
startBtn.addEventListener('click', handleStart);
function handleStart() {
  const promises = [...container.children].map(() => {
    return new Promise((resolve, reject) => {
      const random = Math.random();
      if (random > 0.5) {
        resolve('ğŸ¤‘');
      } else {
        reject('ğŸ‘¿');
      }
    });
  });
  Promise.allSettled(promises).then(items => {
    items.forEach((item, i) => {
      container.children[i].textContent = '';
      setTimeout(() => {
        container.children[i].textContent = item.value || item.reason;
        if (i === items.length - 1) {
          result.innerHTML = `${ isWinner ? 'Winner' : 'Loser' }`;
        }
      }, 1000 * (i + 1));
    });
    const isWinner = items.every(item => item.status === 'fulfilled') || items.every(item => item.status === 'rejected');
  });
}