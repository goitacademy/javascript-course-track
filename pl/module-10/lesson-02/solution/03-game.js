/**
 * Napisz oprogramowanie dla automatu do gier.
 * Do rozwiÄ…zania zadania uÅ¼yj gotowych znacznikÃ³w HTML i podstawowych stylÃ³w.
 *
 * Po klikniÄ™ciu przycisku "Start game"
 * w kaÅ¼dym oknie powinna pojawiÄ‡ siÄ™
 * emotikona z 1-sekundowym opÃ³Åºnieniem ('ğŸ¤‘' lub 'ğŸ‘¿')
 *
 * Podczas przetwarzania kaÅ¼dego okna utwÃ³rz tablicÄ™ z obietnicami
 * w ktÃ³rej kaÅ¼de okno bÄ™dzie odpowiedzialne za wÅ‚asne okno,
 * a nastÄ™pnie przetwarzaj tÄ™ tablicÄ™ za pomocÄ… metody Promise.allSettled.
 *
 * Po wypeÅ‚nieniu wszystkich pÃ³l skrypt musi
 * automatycznie okreÅ›liÄ‡, czy gracz wygraÅ‚, czy nie.
 * JeÅ›li kaÅ¼de okno ma takÄ… samÄ… emotikonÄ™, oznacza to, Å¼e uÅ¼ytkownik wygraÅ‚.
 *
 * Pole result wyÅ›wietla komunikat o statusie gry ('Winner' lub 'Loser')
 *
 * Po ponownym klikniÄ™ciu przycisku "Start game"
 * pole powinno zostaÄ‡ wyczyszczone, a gra powinna rozpoczÄ…Ä‡ siÄ™ od poczÄ…tku.
 */

const startBtn = document.querySelector(".start-btn");
const container = document.querySelector(".container");
const result = document.querySelector(".result");

startBtn.addEventListener("click", handleStart);

function handleStart() {
  const promises = [...container.children].map(() => {
    return new Promise((resolve, reject) => {
      const random = Math.random();

      if (random > 0.5) {
        resolve("ğŸ¤‘");
      } else {
        reject("ğŸ‘¿");
      }
    });
  });

  Promise.allSettled(promises).then((items) => {
    items.forEach((item, i) => {
      container.children[i].textContent = "";

      setTimeout(() => {
        container.children[i].textContent = item.value || item.reason;

        if (i === items.length - 1) {
          result.innerHTML = `${isWinner ? "Winner" : "Loser"}`;
        }
      }, 1000 * (i + 1));
    });

    const isWinner =
      items.every((item) => item.status === "fulfilled") ||
      items.every((item) => item.status === "rejected");
  });
}
